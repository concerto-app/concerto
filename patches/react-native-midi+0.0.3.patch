diff --git a/node_modules/react-native-midi/android/build.gradle b/node_modules/react-native-midi/android/build.gradle
index 0958132..26f3852 100644
--- a/node_modules/react-native-midi/android/build.gradle
+++ b/node_modules/react-native-midi/android/build.gradle
@@ -1,15 +1,3 @@
-// android/build.gradle
-
-// based on:
-//
-// * https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle
-//   original location:
-//   - https://github.com/facebook/react-native/blob/0.58-stable/local-cli/templates/HelloWorld/android/build.gradle
-//
-// * https://github.com/facebook/react-native/blob/0.60-stable/template/android/app/build.gradle
-//   original location:
-//   - https://github.com/facebook/react-native/blob/0.58-stable/local-cli/templates/HelloWorld/android/app/build.gradle
-
 def DEFAULT_COMPILE_SDK_VERSION = 28
 def DEFAULT_BUILD_TOOLS_VERSION = '28.0.3'
 def DEFAULT_MIN_SDK_VERSION = 16
@@ -20,26 +8,22 @@ def safeExtGet(prop, fallback) {
 }
 
 apply plugin: 'com.android.library'
-apply plugin: 'maven'
+apply plugin: 'maven-publish'
 
 buildscript {
-    // The Android Gradle plugin is only required when opening the android folder stand-alone.
-    // This avoids unnecessary downloads and potential conflicts when the library is included as a
-    // module dependency in an application project.
-    // ref: https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_script_external_dependencies
     if (project == rootProject) {
         repositories {
             google()
-            jcenter()
+            mavenCentral()
         }
         dependencies {
-            classpath 'com.android.tools.build:gradle:3.4.1'
+            classpath 'com.android.tools.build:gradle:7.2.0'
         }
     }
 }
 
 apply plugin: 'com.android.library'
-apply plugin: 'maven'
+apply plugin: 'maven-publish'
 
 android {
     compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
@@ -56,23 +40,19 @@ android {
 }
 
 repositories {
-    // ref: https://www.baeldung.com/maven-local-repository
     mavenLocal()
     maven {
-        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
         url "$rootDir/../node_modules/react-native/android"
     }
     maven {
-        // Android JSC is installed from npm
         url "$rootDir/../node_modules/jsc-android/dist"
     }
     google()
-    jcenter()
+    mavenCentral()
 }
 
 dependencies {
-    //noinspection GradleDynamicVersion
-    implementation 'com.facebook.react:react-native:+'  // From node_modules
+    implementation 'com.facebook.react:react-native:+'
     implementation fileTree(dir: 'libs', include: ['*.aar'])
 }
 
@@ -105,22 +85,9 @@ def configureReactNativePom(def pom) {
 }
 
 afterEvaluate { project ->
-    // some Gradle build hooks ref:
-    // https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch03.html
-    task androidJavadoc(type: Javadoc) {
-        source = android.sourceSets.main.java.srcDirs
-        classpath += files(android.bootClasspath)
-        classpath += files(project.getConfigurations().getByName('compile').asList())
-        include '**/*.java'
-    }
-
-    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
-        classifier = 'javadoc'
-        from androidJavadoc.destinationDir
-    }
 
     task androidSourcesJar(type: Jar) {
-        classifier = 'sources'
+        archiveClassifier = 'sources'
         from android.sourceSets.main.java.srcDirs
         include '**/*.java'
     }
@@ -134,17 +101,11 @@ afterEvaluate { project ->
         }
     }
 
-    artifacts {
-        archives androidSourcesJar
-        archives androidJavadocJar
-    }
-
-    task installArchives(type: Upload) {
-        configuration = configurations.archives
-        repositories.mavenDeployer {
-            // Deploy to react-native-event-bridge/maven, ready to publish to npm
-            repository url: "file://${projectDir}/../android/maven"
-            configureReactNativePom pom
+    publishing {
+        publications {
+            maven(MavenPublication) {
+                artifact androidSourcesJar
+            }
         }
     }
 }
diff --git a/node_modules/react-native-midi/android/src/main/java/com/shaverz/midi/MidiModule.java b/node_modules/react-native-midi/android/src/main/java/com/shaverz/midi/MidiModule.java
index 1f963ee..b9a2cf8 100644
--- a/node_modules/react-native-midi/android/src/main/java/com/shaverz/midi/MidiModule.java
+++ b/node_modules/react-native-midi/android/src/main/java/com/shaverz/midi/MidiModule.java
@@ -1,5 +1,6 @@
 package com.shaverz.midi;
 
+import android.hardware.usb.UsbDevice;
 import android.os.Handler;
 import android.os.Looper;
 
@@ -9,6 +10,8 @@ import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.Callback;
 import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.WritableNativeArray;
+import com.facebook.react.bridge.WritableNativeMap;
 import com.facebook.react.modules.core.DeviceEventManagerModule;
 
 import java.util.ArrayList;
@@ -123,9 +126,34 @@ public class MidiModule extends ReactContextBaseJavaModule implements LifecycleE
         }
     }
 
+    private WritableNativeMap mapDevice(UsbDevice device) {
+        WritableNativeMap result = new WritableNativeMap();
+        result.putInt("id", device.getDeviceId());
+        result.putInt("class", device.getDeviceClass());
+        result.putInt("subclass", device.getDeviceSubclass());
+        result.putInt("protocol", device.getDeviceProtocol());
+        result.putInt("productId", device.getProductId());
+        result.putInt("vendorId", device.getVendorId());
+        result.putString("name", device.getDeviceName());
+        result.putString("manufacturerName", device.getManufacturerName());
+        result.putString("productName", device.getProductName());
+        result.putString("serialNumber", device.getSerialNumber());
+        result.putString("version", device.getVersion());
+        return result;
+    }
+
     @ReactMethod
     public void getDevices(Promise promise) {
-        promise.resolve(new ArrayList(mUsbDriver.getDevices().values()));
+        Map<Integer, UsbDevice> deviceMap = mUsbDriver.getDevices();
+
+        WritableNativeArray result = new WritableNativeArray();
+
+        for (UsbDevice device: deviceMap.values()) {
+            WritableNativeMap mappedDevice = this.mapDevice(device);
+            result.pushMap(mappedDevice);
+        }
+
+        promise.resolve(result);
     }
 
     @ReactMethod
@@ -135,6 +163,8 @@ public class MidiModule extends ReactContextBaseJavaModule implements LifecycleE
 
     @ReactMethod
     public void getDevice(int id, Promise promise) {
-        promise.resolve(mUsbDriver.getDevices().get(id));
+        UsbDevice device = mUsbDriver.getDevices().get(id);
+        WritableNativeMap result = this.mapDevice(device);
+        promise.resolve(result);
     }
 }
